import React, { useState, useRef, useEffect } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, ScrollView, StatusBar, Modal, Pressable, Animated, Dimensions } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { router, Stack } from 'expo-router';
import { Ionicons } from '@expo/vector-icons';

// Interface cho ƒë·ªëi t∆∞·ª£ng th√¥ng b√°o
interface Notification {
  id: string;
  type: 'success' | 'info' | 'warning' | 'alert';
  title: string;
  message: string;
  time: string;
  icon: keyof typeof Ionicons.glyphMap;
  iconBackground: string;
  iconColor: string;
  hasAction: boolean;
  actionText?: string;
  actionHandler?: () => void;
}

// Interface cho lo·∫°i b·ªô l·ªçc
interface FilterOption {
  id: string;
  type: string;
  label: string;
  icon: keyof typeof Ionicons.glyphMap;
  iconBackground: string;
  iconColor: string;
  selected: boolean;
}

// D·ªØ li·ªáu m·∫´u cho c√°c th√¥ng b√°o
const notifications: Notification[] = [
  {
    id: '1',
    type: 'success',
    title: 'üéâ Ch√∫c m·ª´ng! H·ª£p ƒë·ªìng DA588 ƒë√£ k√Ω th√†nh c√¥ng!',
    message: 'Xin ch√∫c m·ª´ng b·∫°n ƒë√£ k√Ω th√†nh c√¥ng h·ª£p ƒë·ªìng [M√£ s·ªë h·ª£p ƒë·ªìng] v·ªõi kh√°ch h√†ng [T√™n kh√°ch h√†ng]. Hoa h·ªìng c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω v√† chuy·ªÉn s·ªõm.',
    time: '01 gi·ªù tr∆∞·ªõc',
    icon: 'checkmark-circle',
    iconBackground: '#ECFDF3',
    iconColor: '#12B669',
    hasAction: false,
  },
  {
    id: '2',
    type: 'info',
    title: 'üéâ Ch√†o m·ª´ng th√†nh vi√™n m·ªõi!',
    message: 'Xin ch√∫c m·ª´ng! Y√™u c·∫ßu ƒëƒÉng k√Ω ƒë·∫°i l√Ω m·ªõi c·ªßa Ho√†ng Ng·ªçc T√¢n ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát v√† b·∫°n ƒë√£ c√≥ th√™m m·ªôt th√†nh vi√™n m·ªõi gia nh·∫≠p c·ªông ƒë·ªìng b√°n h√†ng c·ªßa m√¨nh. Ch√∫c b·∫°n v√† ƒë·ªôi ng≈© g·∫∑t h√°i nhi·ªÅu th√†nh c√¥ng!',
    time: '01 gi·ªù tr∆∞·ªõc',
    icon: 'people',
    iconBackground: '#EFF8FF',
    iconColor: '#2E90FA',
    hasAction: false,
  },
  {
    id: '3',
    type: 'warning',
    title: 'B√†i vi·∫øt m·ªõi v·ªÅ d·ª± √°n DA688 v·ª´a ƒë∆∞·ª£c ƒëƒÉng t·∫£i!',
    message: 'ƒê√£ c√≥ b√†i vi·∫øt m·ªõi nh·∫•t v·ªÅ d·ª± √°n DA688 m√† b·∫°n ƒë√£ k√Ω h·ª£p ƒë·ªìng th√†nh c√¥ng! Kh√°m ph√° ngay th√¥ng tin c·∫≠p nh·∫≠t v√† h·∫•p d·∫´n.',
    time: '02 ng√†y tr∆∞·ªõc',
    icon: 'document',
    iconBackground: '#FFFAEB',
    iconColor: '#F79009',
    hasAction: true,
    actionText: 'Xem b√†i vi·∫øt',
    actionHandler: () => console.log('M·ªü b√†i vi·∫øt'),
  },
  {
    id: '4',
    type: 'alert',
    title: 'Ch√∫ √Ω, th√¥ng tin v·ªÅ kh√°ch h√†ng s·∫Øp h·∫øt hi·ªáu l·ª±c',
    message: 'Th·ªùi h·∫°n hi·ªáu l·ª±c nh·∫≠n hoa h·ªìng t·ª´ vi·ªác cung c·∫•p th√¥ng tin kh√°ch h√†ng ti·ªÅm nƒÉng Nguy·ªÖn VƒÉn ƒê·∫°i s·∫Øp k·∫øt th√∫c. H√£y nhanh ch√≥ng li√™n h·ªá ƒë·ªÉ kh√¥ng b·ªè l·ª° c∆° h·ªôi n√†y!',
    time: '02 ng√†y tr∆∞·ªõc',
    icon: 'person',
    iconBackground: '#FFECED',
    iconColor: '#ED1C24',
    hasAction: true,
    actionText: 'Xem th√¥ng tin kh√°ch h√†ng',
    actionHandler: () => console.log('Xem th√¥ng tin kh√°ch h√†ng'),
  },
];

// D·ªØ li·ªáu c√°c lo·∫°i b·ªô l·ªçc
const filterOptions: FilterOption[] = [
  {
    id: '1',
    type: 'success',
    label: 'H·ª£p ƒë·ªìng',
    icon: 'checkmark-circle',
    iconBackground: '#ECFDF3',
    iconColor: '#12B669',
    selected: false,
  },
  {
    id: '2',
    type: 'commission',
    label: 'Hoa h·ªìng',
    icon: 'cash',
    iconBackground: '#F9F5FF',
    iconColor: '#9D76ED',
    selected: false,
  },
  {
    id: '3',
    type: 'info',
    label: 'C·ªông ƒë·ªìng',
    icon: 'people',
    iconBackground: '#EFF8FF',
    iconColor: '#2E90FA',
    selected: false,
  },
  {
    id: '4',
    type: 'warning',
    label: 'B√†i vi·∫øt',
    icon: 'document',
    iconBackground: '#FFFAEB',
    iconColor: '#F79009',
    selected: false,
  },
  {
    id: '5',
    type: 'alert',
    label: 'Kh√°ch h√†ng',
    icon: 'person',
    iconBackground: '#FFECED',
    iconColor: '#ED1C24',
    selected: false,
  },
];

// Component hi·ªÉn th·ªã t·ª´ng th√¥ng b√°o ri√™ng l·∫ª
const NotificationItem = ({ notification }: { notification: Notification }) => {
  return (
    <View style={styles.notificationItem}>
      <View style={[styles.iconContainer, { backgroundColor: notification.iconBackground }]}>
        <Ionicons name={notification.icon} size={20} color={notification.iconColor} />
      </View>
      
      <View style={styles.contentContainer}>
        <View style={styles.textContainer}>
          <Text style={styles.notificationTitle}>{notification.title}</Text>
          <Text style={styles.notificationMessage}>{notification.message}</Text>
          <View style={styles.timeContainer}>
            <Text style={styles.timeText}>{notification.time}</Text>
          </View>
        </View>
        
        {notification.hasAction && (
          <TouchableOpacity 
            style={styles.actionButton}
            onPress={notification.actionHandler}
          >
            <Text style={styles.actionText}>{notification.actionText}</Text>
          </TouchableOpacity>
        )}
      </View>
    </View>
  );
};

// Component hi·ªÉn th·ªã t·ª´ng item trong b·ªô l·ªçc
const FilterItem = ({ filter, onPress }: { filter: FilterOption, onPress: () => void }) => {
  return (
    <TouchableOpacity 
      style={styles.filterItem}
      onPress={onPress}
    >
      <View style={[styles.filterIconContainer, { backgroundColor: filter.iconBackground }]}>
        <Ionicons name={filter.icon} size={20} color={filter.iconColor} />
      </View>
      <Text style={styles.filterLabel}>{filter.label}</Text>
    </TouchableOpacity>
  );
};

export default function NotificationScreen() {
  const [isFilterVisible, setIsFilterVisible] = useState(false);
  const [filters, setFilters] = useState<FilterOption[]>(filterOptions);
  const [filteredNotifications, setFilteredNotifications] = useState<Notification[]>(notifications);
  
  // Animation values
  const backdropOpacity = useRef(new Animated.Value(0)).current;
  const drawerTranslateY = useRef(new Animated.Value(Dimensions.get('window').height)).current;

  // Animation timing
  const ANIMATION_DURATION = 300;

  // Hi·ªÉn th·ªã/·∫©n b·ªô l·ªçc v·ªõi animation
  const toggleFilterModal = () => {
    if (isFilterVisible) {
      // ·∫®n
      Animated.parallel([
        Animated.timing(backdropOpacity, {
          toValue: 0,
          duration: ANIMATION_DURATION,
          useNativeDriver: true,
        }),
        Animated.timing(drawerTranslateY, {
          toValue: Dimensions.get('window').height,
          duration: ANIMATION_DURATION,
          useNativeDriver: true,
        }),
      ]).start(() => {
        setIsFilterVisible(false);
      });
    } else {
      // Hi·ªÉn th·ªã
      setIsFilterVisible(true);
    }
  };

  // Khi modal ƒë∆∞·ª£c hi·ªÉn th·ªã, b·∫Øt ƒë·∫ßu animation
  useEffect(() => {
    if (isFilterVisible) {
      Animated.parallel([
        Animated.timing(backdropOpacity, {
          toValue: 1,
          duration: ANIMATION_DURATION,
          useNativeDriver: true,
        }),
        Animated.timing(drawerTranslateY, {
          toValue: 0,
          duration: ANIMATION_DURATION,
          useNativeDriver: true,
        }),
      ]).start();
    }
  }, [isFilterVisible]);

  // X·ª≠ l√Ω khi ch·ªçn m·ªôt b·ªô l·ªçc
  const handleFilterSelect = (filterId: string) => {
    const updatedFilters = filters.map(filter => {
      if (filter.id === filterId) {
        return { ...filter, selected: !filter.selected };
      }
      return filter;
    });
    setFilters(updatedFilters);
    
    // L·ªçc danh s√°ch th√¥ng b√°o d·ª±a tr√™n b·ªô l·ªçc ƒë∆∞·ª£c ch·ªçn
    // ƒê√¢y l√† logic ƒë∆°n gi·∫£n, b·∫°n c√≥ th·ªÉ t√πy ch·ªânh theo nhu c·∫ßu th·ª±c t·∫ø
    const selectedFilterTypes = updatedFilters
      .filter(filter => filter.selected)
      .map(filter => filter.type);
    
    if (selectedFilterTypes.length === 0) {
      // N·∫øu kh√¥ng c√≥ b·ªô l·ªçc n√†o ƒë∆∞·ª£c ch·ªçn, hi·ªÉn th·ªã t·∫•t c·∫£
      setFilteredNotifications(notifications);
    } else {
      // N·∫øu c√≥ b·ªô l·ªçc ƒë∆∞·ª£c ch·ªçn, l·ªçc theo lo·∫°i t∆∞∆°ng ·ª©ng
      const filtered = notifications.filter(notification => 
        selectedFilterTypes.includes(notification.type));
      setFilteredNotifications(filtered);
    }
  };

  return (
    <React.Fragment>
      <Stack.Screen options={{ headerShown: false }} />
      <SafeAreaView style={styles.container}>
        <StatusBar barStyle="dark-content" />
        
        {/* Header */}
        <View style={styles.header}>
          <TouchableOpacity onPress={() => router.back()}>
            <Ionicons name="chevron-back" size={24} color="#7B7D9D" />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>Tin nh·∫Øn</Text>
          <TouchableOpacity onPress={toggleFilterModal}>
            <Ionicons name="filter" size={24} color="#7B7D9D" />
          </TouchableOpacity>
        </View>
        
        {/* Danh s√°ch th√¥ng b√°o */}
        <ScrollView showsVerticalScrollIndicator={false}>
          <View style={styles.notificationsContainer}>
            {filteredNotifications.map((notification) => (
              <NotificationItem key={notification.id} notification={notification} />
            ))}
            {filteredNotifications.length === 0 && (
              <View style={styles.emptyContainer}>
                <Text style={styles.emptyText}>Kh√¥ng c√≥ th√¥ng b√°o n√†o ph√π h·ª£p</Text>
              </View>
            )}
          </View>
        </ScrollView>

        {/* Modal b·ªô l·ªçc v·ªõi animation t√πy ch·ªânh */}
        {isFilterVisible && (
          <View style={styles.modalContainer}>
            {/* Backdrop v·ªõi hi·ªáu ·ª©ng fade */}
            <Animated.View 
              style={[
                styles.modalBackdrop,
                { opacity: backdropOpacity }
              ]}
            >
              <Pressable 
                style={StyleSheet.absoluteFill}
                onPress={toggleFilterModal}
              />
            </Animated.View>
            
            {/* Drawer v·ªõi hi·ªáu ·ª©ng slide up */}
            <Animated.View 
              style={[
                styles.filterContainer,
                { transform: [{ translateY: drawerTranslateY }] }
              ]}
            >
              {/* Thanh k√©o */}
              <View style={styles.dragIndicator} />
              
              {/* Ti√™u ƒë·ªÅ */}
              <View style={styles.filterHeader}>
                <Text style={styles.filterTitle}>L·ªçc th√¥ng b√°o</Text>
              </View>
              
              {/* Danh s√°ch b·ªô l·ªçc */}
              <View style={styles.filterList}>
                {filters.map((filter) => (
                  <FilterItem 
                    key={filter.id} 
                    filter={filter} 
                    onPress={() => handleFilterSelect(filter.id)} 
                  />
                ))}
              </View>
            </Animated.View>
          </View>
        )}
      </SafeAreaView>
    </React.Fragment>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    height: 56,
    borderBottomWidth: 1,
    borderBottomColor: '#F3F4F6',
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: '700',
    color: '#111927',
  },
  notificationsContainer: {
    padding: 8,
  },
  notificationItem: {
    flexDirection: 'row',
    padding: 8,
    paddingHorizontal: 16,
    alignItems: 'flex-start',
    gap: 12,
  },
  iconContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
  },
  contentContainer: {
    flex: 1,
    gap: 8,
  },
  textContainer: {
    gap: 4,
  },
  notificationTitle: {
    fontSize: 16,
    fontWeight: '500',
    color: '#27273E',
  },
  notificationMessage: {
    fontSize: 14,
    color: '#7B7D9D',
    lineHeight: 20,
  },
  timeContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4,
  },
  timeText: {
    fontSize: 12,
    fontWeight: '500',
    color: '#9394B0',
  },
  actionButton: {
    borderWidth: 0.5,
    borderColor: '#ED1C24',
    borderRadius: 4,
    paddingVertical: 8,
    paddingHorizontal: 12,
    alignSelf: 'flex-start',
    justifyContent: 'center',
    alignItems: 'center',
  },
  actionText: {
    fontSize: 14,
    color: '#ED1C24',
  },
  // Styles cho b·ªô l·ªçc
  modalContainer: {
    flex: 1,
    justifyContent: 'flex-end',
  },
  modalBackdrop: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(39, 39, 62, 0.3)',
  },
  filterContainer: {
    backgroundColor: '#FFFFFF',
    borderTopLeftRadius: 16,
    borderTopRightRadius: 16,
    paddingBottom: 24,
  },
  dragIndicator: {
    width: 36,
    height: 4,
    backgroundColor: '#D9D9D9',
    borderRadius: 4,
    alignSelf: 'center',
    marginTop: 12,
    marginBottom: 12,
  },
  filterHeader: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    paddingBottom: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#F3F4F6',
  },
  filterTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: '#111927',
  },
  filterList: {
    padding: 16,
  },
  filterItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
    gap: 8,
  },
  filterIconContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
  },
  filterLabel: {
    fontSize: 14,
    fontWeight: '500',
    color: '#27273E',
  },
  emptyContainer: {
    padding: 16,
    alignItems: 'center',
  },
  emptyText: {
    fontSize: 14,
    color: '#7B7D9D',
  },
}); 